{"version":3,"sources":["utils/common-functions.js","components/row.js","components/table.js","components/level.js","constants.js","components/choropleth.js","components/mapexplorer.js","components/Screens/home.js","components/navbar.js","components/links.js","components/faq.js","components/deepdive.js","App.js","serviceWorker.js","index.js"],"names":["months","formatDate","unformattedDate","day","slice","month","year","time","formatDateAbsolute","validateCTS","data","today","Date","setHours","dataTypes","filter","d","every","dt","date","Number","getFullYear","Row","props","useState","state","setState","districts","setDistricts","sortedDistricts","setSortedDistricts","sortColumn","localStorage","getItem","isAscending","sortData","setSortData","useEffect","sortDistricts","useCallback","aDistricts","sorted","Object","keys","sort","district1","district2","value1","parseInt","confirmed","value2","comparisonValue","forEach","key","handleSort","column","setItem","Fragment","className","total","onMouseEnter","onHighlightState","index","onMouseLeave","touchstart","onClick","handleReveal","style","background","fontWeight","color","deltaconfirmed","active","recovered","deltarecovered","deaths","deltadeaths","display","reveal","colSpan","title","isNaN","parse","lastupdatedtime","formatDistance","e","window","innerWidth","console","log","district","toLowerCase","map","onHighlightDistrict","delta","Unknown","Table","states","setStates","setMaharashtra","revealedStates","setRevealedStates","summary","onlyMaharashtra","statecode","Maharashtra","stateDistrictWiseData","currentsortColumn","currentTarget","querySelector","getAttribute","totalRow","splice","StateData1","StateData2","unshift","doSort","animationDelay","districtData","Level","MAP_TYPES","propertyFieldMap","country","ChoroplethMap","statistic","mapData","setHoveredRegion","mapMeta","changeMap","selectedRegion","choroplethMap","useRef","svgRenderCount","setSvgRenderCount","ready","geoData","d3","remove","propertyField","mapType","svg","current","width","attr","height","topology","topojson","objects","graphObjectName","projection","fitSize","fitExtent","path","onceTouchedRegion","append","selectAll","features","enter","n","properties","maxConfirmed","on","name","err","handleMouseover","target","parentNode","appendChild","text","value","parseFloat","toFixed","toString","toTitleCase","str","split","i","length","charAt","toUpperCase","join","renderData","cells","label","domain","genLength","generatedLabels","labelDelimiter","Math","floor","n1","n2","Array","from","legendLinear","legendColor","shapeWidth","shapeHeight","titleWidth","labels","orient","scale","select","call","a","geoDataFile","prevCount","classed","nodes","id","viewBox","preserveAspectRatio","ref","regionHighlighted","setSelectedRegion","currentHoveredRegion","setCurrentHoveredRegion","currentMap","setCurrentMap","onlyMH","region","getRegionFromState","useMemo","currentMapData","reduce","acc","districtWiseData","getRegionFromDistrict","undefined","newMap","switchMapToState","topDistrict","b","Home","setStateDistrictWiseData","fetched","setFetched","setLastUpdated","setTimeseries","setActivityLog","setRegionHighlighted","getStates","Promise","all","axios","get","response","stateDistrictWiseResponse","updateLogResponse","statewise","cases_time_series","Navbar","location","pathname","transition","alt","src","pages","page","to","pageLink","animationDelayForNavbar","displayName","Links","href","rel","FAQ","scrollTo","question","answer","faq","dangerouslySetInnerHTML","__html","DeepDive","history","require","createBrowserHistory","App","view","render","exact","component","Boolean","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.60d9d951.chunk.js","sourcesContent":["import moment from 'moment';\n\nconst months = {\n  '01': 'Jan',\n  '02': 'Feb',\n  '03': 'Mar',\n  '04': 'Apr',\n  '05': 'May',\n  '06': 'Jun',\n  '07': 'Jul',\n  '08': 'Aug',\n  '09': 'Sep',\n  '10': 'Oct',\n  '11': 'Nov',\n  '12': 'Dec',\n};\n\nconst stateCodes = {\n  AP: 'Andhra Pradesh',\n  AR: 'Arunachal Pradesh',\n  AS: 'Assam',\n  BR: 'Bihar',\n  CT: 'Chhattisgarh',\n  GA: 'Goa',\n  GJ: 'Gujarat',\n  HR: 'Haryana',\n  HP: 'Himachal Pradesh',\n  JH: 'Jharkhand',\n  KA: 'Karnataka',\n  KL: 'Kerala',\n  MP: 'Madhya Pradesh',\n  MH: 'Maharashtra',\n  MN: 'Manipur',\n  ML: 'Meghalaya',\n  MZ: 'Mizoram',\n  NL: 'Nagaland',\n  OR: 'Odisha',\n  PB: 'Punjab',\n  RJ: 'Rajasthan',\n  SK: 'Sikkim',\n  TN: 'Tamil Nadu',\n  TG: 'Telangana',\n  TR: 'Tripura',\n  UT: 'Uttarakhand',\n  UP: 'Uttar Pradesh',\n  WB: 'West Bengal',\n  AN: 'Andaman and Nicobar Islands',\n  CH: 'Chandigarh',\n  DN: 'Dadra and Nagar Haveli',\n  DD: 'Daman and Diu',\n  DL: 'Delhi',\n  JK: 'Jammu and Kashmir',\n  LA: 'Ladakh',\n  LD: 'Lakshadweep',\n  PY: 'Puducherry',\n};\n\nexport const getStateName = (code) => {\n  return stateCodes[code.toUpperCase()];\n};\n\nexport const formatDate = (unformattedDate) => {\n  const day = unformattedDate.slice(0, 2);\n  const month = unformattedDate.slice(3, 5);\n  const year = unformattedDate.slice(6, 10);\n  const time = unformattedDate.slice(11);\n  return `${year}-${month}-${day}T${time}+05:30`;\n};\n\nexport const formatDateAbsolute = (unformattedDate) => {\n  const day = unformattedDate.slice(0, 2);\n  const month = unformattedDate.slice(3, 5);\n  const time = unformattedDate.slice(11);\n  return `${day} ${months[month]}, ${time.slice(0, 5)} IST`;\n};\n\nexport const validateCTS = (data = []) => {\n  const today = new Date();\n  today.setHours(0, 0, 0, 0);\n  const dataTypes = [\n    'dailyconfirmed',\n    'dailydeceased',\n    'dailyrecovered',\n    'totalconfirmed',\n    'totaldeceased',\n    'totalrecovered',\n  ];\n  return data\n    .filter((d) => dataTypes.every((dt) => d[dt]) && d.date)\n    .filter((d) => dataTypes.every((dt) => Number(d[dt]) >= 0))\n    .filter((d) => {\n      const year = today.getFullYear();\n      return new Date(d.date + year) < today;\n    });\n};\n\nexport const parseStateTimeseries = ({states_daily: data}) => {\n  const statewiseSeries = Object.keys(stateCodes).reduce((a, c) => {\n    a[c] = [];\n    return a;\n  }, {});\n\n  for (let i = 0; i < data.length; i += 3) {\n    const date = moment(data[i].date, 'DD-MMM-YY');\n    Object.entries(statewiseSeries).forEach(([k, v]) => {\n      const stateCode = k.toLowerCase();\n      const prev = v[v.length - 1] || {};\n      v.push({\n        dailyconfirmed: +data[i][stateCode] || 0,\n        dailyrecovered: +data[i + 1][stateCode] || 0,\n        dailydeceased: +data[i + 2][stateCode] || 0,\n        date: date.format('DD MMMM '),\n        totalconfirmed: +data[i][stateCode] + prev.dailyconfirmed || 0,\n        totaldeceased: +data[i + 1][stateCode] + prev.dailyrecovered || 0,\n        totalrecovered: +data[i + 2][stateCode] + prev.dailydeceased || 0,\n      });\n    });\n  }\n\n  return statewiseSeries;\n};","import React, {useState, useEffect, useCallback} from 'react';\nimport * as Icon from 'react-feather';\nimport {formatDate, formatDateAbsolute} from '../utils/common-functions';\nimport {formatDistance} from 'date-fns';\nimport {Link} from 'react-router-dom';\n\nfunction Row(props) {\n  const [state, setState] = useState(props.state);\n  const [districts, setDistricts] = useState(props.districts);\n  const [sortedDistricts, setSortedDistricts] = useState(props.districts);\n  const [sortData, setSortData] = useState({\n    sortColumn: localStorage.getItem('district.sortColumn')\n      ? localStorage.getItem('district.sortColumn')\n      : 'confirmed',\n    isAscending: localStorage.getItem('district.isAscending')\n      ? localStorage.getItem('district.isAscending') === 'true'\n      : false,\n  });\n\n  useEffect(() => {\n    setState(props.state);\n  }, [props.state]);\n\n  useEffect(() => {\n    setDistricts(props.districts);\n    setSortedDistricts(props.districts);\n  }, [props.districts]);\n\n  const handleReveal = () => {\n    props.handleReveal(props.state.state);\n  };\n\n  const sortDistricts = useCallback(\n    (aDistricts) => {\n      const sorted = {};\n      if (aDistricts) {\n        Object.keys(aDistricts)\n          .sort((district1, district2) => {\n            const sortColumn = sortData.sortColumn;\n            const value1 =\n              sortColumn === 'district'\n                ? district1\n                : parseInt(aDistricts[district1].confirmed);\n            const value2 =\n              sortColumn === 'district'\n                ? district2\n                : parseInt(aDistricts[district2].confirmed);\n            const comparisonValue =\n              value1 > value2\n                ? 1\n                : value1 === value2 && district1 > district2\n                ? 1\n                : -1;\n            return sortData.isAscending\n              ? comparisonValue\n              : comparisonValue * -1;\n          })\n          .forEach((key) => {\n            sorted[key] = aDistricts[key];\n          });\n        setSortedDistricts(sorted);\n      }\n    },\n    [sortData.isAscending, sortData.sortColumn]\n  );\n\n  const handleSort = (column) => {\n    const isAscending =\n      sortData.sortColumn === column\n        ? !sortData.isAscending\n        : sortData.sortColumn === 'district';\n    setSortData({\n      sortColumn: column,\n      isAscending: isAscending,\n    });\n    localStorage.setItem('district.sortColumn', column);\n    localStorage.setItem('district.isAscending', isAscending);\n  };\n\n  useEffect(() => {\n    sortDistricts(districts);\n  }, [districts, sortData, sortDistricts]);\n\n  return (\n    <React.Fragment>\n      <tr\n        className={props.total ? 'state is-total' : 'state'}\n        onMouseEnter={() => props.onHighlightState?.(state, props.index)}\n        onMouseLeave={() => props.onHighlightState?.()}\n        touchstart={() => props.onHighlightState?.(state, props.index)}\n        onClick={!props.total ? handleReveal : null}\n        style={{background: props.index % 2 === 0 ? '#f8f9fa' : ''}}\n      >\n        <td style={{fontWeight: 600}}>\n          <div className=\"table__title-wrapper\">\n            {/* <span\n              className={`dropdown ${\n                props.reveal ? 'rotateRightDown' : 'rotateDownRight'\n              }`}\n              style={{display: !props.total ? '' : 'none'}}\n              onClick={() => {\n                handleReveal();\n              }}\n            >\n              <Icon.ChevronDown />\n            </span> */}\n            {/* {state.state}\n            {state.state === 'West Bengal' && (\n              <Link to=\"/faq\">\n                <Icon.HelpCircle className=\"height-22\" />\n              </Link>\n            )} */}\n\n            Total\n          </div>\n        </td>\n        <td>\n          <span className=\"deltas\" style={{color: '#ff073a'}}>\n            {state.deltaconfirmed > 0 && <Icon.ArrowUp />}\n            {state.deltaconfirmed > 0 ? `${state.deltaconfirmed}` : ''}\n          </span>\n          <span className=\"table__count-text\">\n            {parseInt(state.confirmed) === 0 ? '-' : state.confirmed}\n          </span>\n        </td>\n        <td\n          style={{color: parseInt(state.active) === 0 ? '#B5B5B5' : 'inherit'}}\n        >\n          {/* <span className=\"deltas\" style={{color: '#007bff'}}>\n            {!state.delta.active==0 && <Icon.ArrowUp/>}\n            {state.delta.active>0 ? `${state.delta.active}` : ''}\n          </span>*/}\n          {parseInt(state.active) === 0 ? '-' : state.active}\n        </td>\n        <td\n          style={{\n            color: parseInt(state.recovered) === 0 ? '#B5B5B5' : 'inherit',\n          }}\n        >\n          <span className=\"deltas\" style={{color: '#28a745'}}>\n            {state.deltarecovered > 0 && <Icon.ArrowUp />}\n            {state.deltarecovered > 0 ? `${state.deltarecovered}` : ''}\n          </span>\n          <span className=\"table__count-text\">\n            {parseInt(state.recovered) === 0 ? '-' : state.recovered}\n          </span>\n        </td>\n        <td\n          style={{color: parseInt(state.deaths) === 0 ? '#B5B5B5' : 'inherit'}}\n        >\n          <span className=\"deltas\" style={{color: '#6c757d'}}>\n            {state.deltadeaths > 0 && <Icon.ArrowUp />}\n            {state.deltadeaths > 0 ? `${state.deltadeaths}` : ''}\n          </span>\n          <span className=\"table__count-text\">\n            {parseInt(state.deaths) === 0 ? '-' : state.deaths}\n          </span>\n        </td>\n      </tr>\n\n      <tr\n        className={'state-last-update'}\n        style={{display: props.reveal && !props.total ? '' : 'none'}}\n      >\n        <td colSpan={2}>\n          <div className=\"last-update\">\n            <h6>Last Updated&nbsp;</h6>\n            <h6\n              title={\n                isNaN(Date.parse(formatDate(props.state.lastupdatedtime)))\n                  ? ''\n                  : formatDateAbsolute(props.state.lastupdatedtime)\n              }\n            >\n              {isNaN(Date.parse(formatDate(props.state.lastupdatedtime)))\n                ? ''\n                : `${formatDistance(\n                    new Date(formatDate(props.state.lastupdatedtime)),\n                    new Date()\n                  )} Ago`}\n            </h6>\n          </div>\n        </td>\n      </tr>\n\n      <tr\n        className={`district-heading`}\n        style={{display: props.reveal && !props.total ? '' : 'none'}}\n      >\n        <td onClick={(e) => handleSort('district')}>\n          <div className=\"heading-content\">\n            <abbr title=\"District\">District</abbr>\n            <div\n              style={{\n                display:\n                  sortData.sortColumn === 'district' ? 'initial' : 'none',\n              }}\n            >\n              {sortData.isAscending ? (\n                <div className=\"arrow-up\" />\n              ) : (\n                <div className=\"arrow-down\" />\n              )}\n            </div>\n          </div>\n        </td>\n        <td onClick={(e) => handleSort('confirmed')}>\n          <div className=\"heading-content\">\n            <abbr\n              className={`${window.innerWidth <= 769 ? 'is-cherry' : ''}`}\n              title=\"Confirmed\"\n            >\n              {window.innerWidth <= 769\n                ? window.innerWidth <= 375\n                  ? 'C'\n                  : 'Cnfmd'\n                : 'Confirmed'}\n            </abbr>\n            <div\n              style={{\n                display:\n                  sortData.sortColumn === 'confirmed' ? 'initial' : 'none',\n              }}\n            >\n              {sortData.isAscending ? (\n                <div className=\"arrow-up\" />\n              ) : (\n                <div className=\"arrow-down\" />\n              )}\n            </div>\n          </div>\n        </td>\n      </tr>\n      {console.log('Sorted Districts',sortedDistricts)}\n      {sortedDistricts &&\n        Object.keys(sortedDistricts)\n          .filter((district) => district.toLowerCase() !== 'unknown')\n          .map((district, index) => {\n            if (district.toLowerCase() !== 'unknown' && district.toLowerCase() !== 'gujarat*') {\n              return (\n                <tr\n                  key={index}\n                  className={`district`}\n                  style={{\n                    display: props.reveal && !props.total ? '' : 'none',\n                    background: index % 2 === 0 ? '#f8f9fa' : '',\n                  }}\n                  onMouseEnter={() =>\n                    props.onHighlightDistrict?.(district, state, props.index)\n                  }\n                  onMouseLeave={() => props.onHighlightDistrict?.()}\n                  touchstart={() =>\n                    props.onHighlightDistrict?.(district, state, props.index)\n                  }\n                >\n                  <td style={{fontWeight: 600}}>{district}</td>\n                  <td>\n                    <span className=\"deltas\" style={{color: '#ff073a'}}>\n                      {sortedDistricts[district].delta.confirmed > 0 && (\n                        <Icon.ArrowUp />\n                      )}\n                      {sortedDistricts[district].delta.confirmed > 0\n                        ? `${sortedDistricts[district].delta.confirmed}`\n                        : ''}\n                    </span>\n                    <span className=\"table__count-text\">\n                      {sortedDistricts[district].confirmed}\n                    </span>\n                  </td>\n                </tr>\n              );\n            }\n            return null;\n          })}\n\n      {sortedDistricts?.Unknown && (\n        <tr\n          className={`district`}\n          style={{display: props.reveal && !props.total ? '' : 'none'}}\n        >\n          <td style={{fontWeight: 600}}>Unknown</td>\n          <td>\n            <span className=\"deltas\" style={{color: '#ff073a'}}>\n              {sortedDistricts['Unknown'].delta.confirmed > 0 && (\n                <Icon.ArrowUp />\n              )}\n              {sortedDistricts['Unknown'].delta.confirmed > 0\n                ? `${sortedDistricts['Unknown'].delta.confirmed}`\n                : ''}\n            </span>\n            <span className=\"table__count-text\">\n              {sortedDistricts['Unknown'].confirmed}\n            </span>\n          </td>\n        </tr>\n      )}\n\n      <tr\n        className={`spacer`}\n        style={{display: props.reveal && !props.total ? '' : 'none'}}\n      >\n        <td></td>\n        <td></td>\n        <td></td>\n      </tr>\n    </React.Fragment>\n  );\n}\n\nexport default Row;\n","import React, {useState, useEffect} from 'react';\nimport {Link} from 'react-router-dom';\n\nimport Row from './row';\n\nfunction Table(props) {\n  const [states, setStates] = useState(props.states);\n\n  const [maharashtra,setMaharashtra] = useState(props.states)\n  const [revealedStates, setRevealedStates] = useState({});\n  const [districts, setDistricts] = useState({});\n  const [count, setCount] = useState(0);\n  const [sortData, setSortData] = useState({\n    sortColumn: localStorage.getItem('state.sortColumn')\n      ? localStorage.getItem('state.sortColumn')\n      : 'confirmed',\n    isAscending: localStorage.getItem('state.isAscending')\n      ? localStorage.getItem('state.isAscending') === 'true'\n      : false,\n  });\n\n  // useEffect(() => {\n  //   if (props.summary === true) {\n  //     setStates(props.states.filter(state => {\n  //       if(state)return state.statecode == 'MH'\n  //     }));\n  //   } \n  // }, [props.states]);\n\n  useEffect(() => {\n    if (props.summary === true) {\n      setStates(props.states.slice(0, 9));\n      const onlyMaharashtra = props.states.filter(state => {\n        return state && state.statecode == 'MH'\n      })\n      setMaharashtra(onlyMaharashtra)\n    } else {\n      setStates(props.states);\n      const onlyMaharashtra = props.states.filter(state => {\n        return state && state.statecode == 'MH'\n      })\n      setMaharashtra(onlyMaharashtra)\n    }\n  }, [props.states, props.summary]);\n\n  useEffect(() => {\n    if (props.states[0]) {\n      setRevealedStates(\n        {Maharashtra: true}\n      );\n    }\n  }, [props.states]);\n\n  // useEffect(() => {\n  //   if (states.length > 0) {\n  //     // slice to ignore the first item which is the total count\n  //     setCount(states.slice(1).filter((s) => s && s.confirmed > 0).length);\n  //   }\n  // }, [states]);\n\n  useEffect(() => {\n    setDistricts(props.stateDistrictWiseData);\n  }, [props.stateDistrictWiseData]);\n\n\n  const doSort = (e, props) => {\n    const totalRow = states.splice(0, 1);\n    states.sort((StateData1, StateData2) => {\n      const sortColumn = sortData.sortColumn;\n      let value1 = StateData1[sortColumn];\n      let value2 = StateData2[sortColumn];\n\n      if (sortColumn !== 'state') {\n        value1 = parseInt(StateData1[sortColumn]);\n        value2 = parseInt(StateData2[sortColumn]);\n      }\n\n      if (sortData.isAscending) {\n        return value1 > value2\n          ? 1\n          : value1 === value2 && StateData1['state'] > StateData2['state']\n          ? 1\n          : -1;\n      } else {\n        return value1 < value2\n          ? 1\n          : value1 === value2 && StateData1['state'] > StateData2['state']\n          ? 1\n          : -1;\n      }\n    });\n    states.unshift(totalRow[0]);\n  };\n\n  const handleSort = (e, props) => {\n    const currentsortColumn = e.currentTarget\n      .querySelector('abbr')\n      .getAttribute('title')\n      .toLowerCase();\n    const isAscending =\n      sortData.sortColumn === currentsortColumn\n        ? !sortData.isAscending\n        : sortData.sortColumn === 'state';\n    setSortData({\n      sortColumn: currentsortColumn,\n      isAscending: isAscending,\n    });\n    localStorage.setItem('state.sortColumn', currentsortColumn);\n    localStorage.setItem('state.isAscending', isAscending);\n  };\n\n  const handleReveal = (state) => {\n    setRevealedStates({\n      ...revealedStates,\n      [state]: !revealedStates[state],\n    });\n  };\n\n  doSort();\n\n  return (\n    <React.Fragment>\n      <h5 className=\"table-fineprint fadeInUp\" style={{animationDelay: '1.5s'}}>\n        {/* Compiled from State Govt. numbers <Link to=\"/faq\">Know More</Link> */}\n      </h5>\n      <table className=\"table fadeInUp\" style={{animationDelay: '1.8s'}}>\n        <thead>\n          <tr>\n            <th\n              className=\"state-heading\"\n              onClick={(e) => handleSort(e, props)}\n            >\n              <div className=\"heading-content\">\n                <abbr title=\"State\">Maharashtra</abbr>\n                <div\n                  style={{\n                    display:\n                      sortData.sortColumn === 'state' ? 'initial' : 'none',\n                  }}\n                >\n                  {sortData.isAscending ? (\n                    <div className=\"arrow-up\" />\n                  ) : (\n                    <div className=\"arrow-down\" />\n                  )}\n                </div>\n              </div>\n            </th>\n            <th className=\"\" onClick={(e) => handleSort(e, props)}>\n              <div className=\"heading-content\">\n                <abbr\n                  className={`${window.innerWidth <= 769 ? 'is-cherry' : ''}`}\n                  title=\"Confirmed\"\n                >\n                  {window.innerWidth <= 769\n                    ? window.innerWidth <= 375\n                      ? 'C'\n                      : 'Cnfmd'\n                    : 'Confirmed'}\n                </abbr>\n                <div\n                  style={{\n                    display:\n                      sortData.sortColumn === 'confirmed' ? 'initial' : 'none',\n                  }}\n                >\n                  {sortData.isAscending ? (\n                    <div className=\"arrow-up\" />\n                  ) : (\n                    <div className=\"arrow-down\" />\n                  )}\n                </div>\n              </div>\n            </th>\n            <th className=\"\" onClick={(e) => handleSort(e, props)}>\n              <div className=\"heading-content\">\n                <abbr\n                  className={`${window.innerWidth <= 769 ? 'is-blue' : ''}`}\n                  title=\"Active\"\n                >\n                  {window.innerWidth <= 769\n                    ? window.innerWidth <= 375\n                      ? 'A'\n                      : 'Actv'\n                    : 'Active'}\n                </abbr>\n                <div\n                  style={{\n                    display:\n                      sortData.sortColumn === 'active' ? 'initial' : 'none',\n                  }}\n                >\n                  {sortData.isAscending ? (\n                    <div className=\"arrow-up\" />\n                  ) : (\n                    <div className=\"arrow-down\" />\n                  )}\n                </div>\n              </div>\n            </th>\n            <th className=\"\" onClick={(e) => handleSort(e, props)}>\n              <div className=\"heading-content\">\n                <abbr\n                  className={`${window.innerWidth <= 769 ? 'is-green' : ''}`}\n                  title=\"Recovered\"\n                >\n                  {window.innerWidth <= 769\n                    ? window.innerWidth <= 375\n                      ? 'R'\n                      : 'Rcvrd'\n                    : 'Recovered'}\n                </abbr>\n                <div\n                  className={\n                    sortData.sortColumn === 'recovered' ? 'sort-black' : ''\n                  }\n                ></div>\n                <div\n                  style={{\n                    display:\n                      sortData.sortColumn === 'recovered' ? 'initial' : 'none',\n                  }}\n                >\n                  {sortData.isAscending ? (\n                    <div className=\"arrow-up\" />\n                  ) : (\n                    <div className=\"arrow-down\" />\n                  )}\n                </div>\n              </div>\n            </th>\n            <th className=\"\" onClick={(e) => handleSort(e, props)}>\n              <div className=\"heading-content\">\n                <abbr\n                  className={`${window.innerWidth <= 769 ? 'is-gray' : ''}`}\n                  title=\"Deaths\"\n                >\n                  {window.innerWidth <= 769\n                    ? window.innerWidth <= 375\n                      ? 'D'\n                      : 'Dcsd'\n                    : 'Deceased'}\n                </abbr>\n                <div\n                  style={{\n                    display:\n                      sortData.sortColumn === 'deaths' ? 'initial' : 'none',\n                  }}\n                >\n                  {sortData.isAscending ? (\n                    <div className=\"arrow-up\" />\n                  ) : (\n                    <div className=\"arrow-down\" />\n                  )}\n                </div>\n              </div>\n            </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {states.map((state, index) => {\n            if (index !== 0 && state.confirmed > 0 && state.statecode === 'MH') {\n              return (\n                <Row\n                  key={index}\n                  index={index}\n                  state={state}\n                  total={false}\n                  reveal={revealedStates[state.state]}\n                  districts={\n                    state.state in districts\n                      ? districts[state.state].districtData\n                      : []\n                  }\n                  onHighlightState={props.onHighlightState}\n                  onHighlightDistrict={props.onHighlightDistrict}\n                  handleReveal={handleReveal}\n                />\n              );\n            }\n            return null;\n          })}\n        </tbody>\n\n        {/* <tbody>\n          {states.length > 1 && props.summary === false && (\n            <Row key={0} state={states[1]} total={true} />\n          )}\n        </tbody> */}\n      </table>\n      {/* <h5 className=\"table-fineprint fadeInUp\" style={{animationDelay: '1s'}}>\n        {count} States/UTS Affected\n      </h5> */}\n    </React.Fragment>\n  );\n}\n\nexport default Table;\n","import React, {useState, useEffect} from 'react';\n\nfunction Level(props) {\n  const [data, setData] = useState(props.data);\n  const [confirmed, setConfirmed] = useState(0);\n  const [active, setActive] = useState(0);\n  const [recoveries, setRecoveries] = useState(0);\n  const [deaths, setDeaths] = useState(0);\n  const [deltas, setDeltas] = useState(0);\n\n  useEffect(() => {\n    setData(props.data);\n  }, [props.data]);\n\n  useEffect(() => {\n    const parseData = () => {\n      let confirmed = 0;\n      let active = 0;\n      let recoveries = 0;\n      let deaths = 0;\n      let deltas = {};\n      data.forEach((state, index) => {\n        if (index !== 0) {\n          confirmed += parseInt(state.confirmed);\n          active += parseInt(state.active);\n          recoveries += parseInt(state.recovered);\n          deaths += parseInt(state.deaths);\n        } else {\n          deltas = {\n            confirmed: parseInt(state.deltaconfirmed),\n            deaths: parseInt(state.deltadeaths),\n            recovered: parseInt(state.deltarecovered),\n          };\n        }\n      });\n      setConfirmed(confirmed);\n      setActive(active);\n      setRecoveries(recoveries);\n      setDeaths(deaths);\n      setDeltas(deltas);\n    };\n    parseData();\n  }, [data]);\n\n  return (\n    <div className=\"Level\">\n      <div\n        className=\"level-item is-cherry fadeInUp\"\n        style={{animationDelay: '1s'}}\n      >\n        <h5>Confirmed</h5>\n        <h4>\n          [\n          {deltas\n            ? deltas.confirmed >= 0\n              ? '+' + deltas.confirmed\n              : '+0'\n            : ''}\n          ]\n        </h4>\n        <h1>{confirmed} </h1>\n      </div>\n\n      <div\n        className=\"level-item is-blue fadeInUp\"\n        style={{animationDelay: '1.1s'}}\n      >\n        <h5 className=\"heading\">Active</h5>\n        <h4>&nbsp;</h4>\n        {/* <h4>[{props.deltas ? props.deltas.confirmeddelta-(props.deltas.recovereddelta+props.deltas.deceaseddelta) >=0 ? '+'+(props.deltas.confirmeddelta-(props.deltas.recovereddelta+props.deltas.deceaseddelta)).toString() : '+0' : ''}]</h4>*/}\n        <h1 className=\"title has-text-info\">{active}</h1>\n      </div>\n\n      <div\n        className=\"level-item is-green fadeInUp\"\n        style={{animationDelay: '1.2s'}}\n      >\n        <h5 className=\"heading\">Recovered</h5>\n        <h4>\n          [\n          {deltas\n            ? deltas.recovered >= 0\n              ? '+' + deltas.recovered\n              : '+0'\n            : ''}\n          ]\n        </h4>\n        <h1 className=\"title has-text-success\">{recoveries} </h1>\n      </div>\n\n      <div\n        className=\"level-item is-gray fadeInUp\"\n        style={{animationDelay: '1.3s'}}\n      >\n        <h5 className=\"heading\">Deceased</h5>\n        <h4>\n          [{deltas ? (deltas.deaths >= 0 ? '+' + deltas.deaths : '+0') : ''}]\n        </h4>\n        <h1 className=\"title has-text-grey\">{deaths}</h1>\n      </div>\n    </div>\n  );\n}\n\nexport default Level;\n","export const MAP_TYPES = {\n  COUNTRY: 'country',\n  STATE: 'state',\n};\n\nexport const MAPS_DIR = '/maps';\n","import React, {useCallback, useEffect, useRef, useState} from 'react';\nimport * as d3 from 'd3';\nimport {legendColor} from 'd3-svg-legend';\nimport * as topojson from 'topojson';\nimport {MAP_TYPES} from '../constants';\n\nconst propertyFieldMap = {\n  country: 'st_nm',\n  state: 'district',\n};\n\nfunction ChoroplethMap({\n  statistic,\n  mapData,\n  setHoveredRegion,\n  mapMeta,\n  changeMap,\n  selectedRegion,\n}) {\n  const choroplethMap = useRef(null);\n  const [svgRenderCount, setSvgRenderCount] = useState(0);\n\n  const ready = useCallback(\n    (geoData) => {\n      d3.selectAll('svg#chart > *').remove();\n      const propertyField = propertyFieldMap[mapMeta.mapType];\n      const maxInterpolation = 0.8;\n      const svg = d3.select(choroplethMap.current);\n      const width = +svg.attr('width');\n      const height = +svg.attr('height');\n\n      const handleMouseover = (name) => {\n        try {\n          setHoveredRegion(name, mapMeta);\n        } catch (err) {\n          console.log('err', err);\n        }\n      };\n\n      const topology = topojson.feature(\n        geoData,\n        geoData.objects[mapMeta.graphObjectName]\n      );\n\n      const projection = d3.geoMercator();\n\n      if (mapMeta.mapType === MAP_TYPES.COUNTRY)\n        projection.fitSize([width, height], topology);\n      else\n        projection.fitExtent(\n          [\n            [90, 20],\n            [width, height],\n          ],\n          topology\n        );\n\n      const path = d3.geoPath(projection);\n\n      let onceTouchedRegion = null;\n\n      svg\n        .append('g')\n        .attr('class', 'states')\n        .selectAll('path')\n        .data(topology.features)\n        .enter()\n        .append('path')\n        .attr('class', 'path-region')\n        .attr('fill', function (d) {\n          const n = parseInt(mapData[d.properties[propertyField]]) || 0;\n          const color =\n            n === 0\n              ? '#ffffff'\n              : d3.interpolateReds(\n                  (maxInterpolation * n) / (statistic.maxConfirmed || 0.001)\n                );\n          return color;\n        })\n        .attr('d', path)\n        .attr('pointer-events', 'all')\n        .on('mouseover', (d) => {\n          handleMouseover(d.properties[propertyField]);\n          const target = d3.event.target;\n          d3.select(target.parentNode.appendChild(target)).attr(\n            'class',\n            'map-hover'\n          );\n        })\n        .on('mouseleave', (d) => {\n          const target = d3.event.target;\n          d3.select(target).attr('class', 'path-region map-default');\n          if (onceTouchedRegion === d) onceTouchedRegion = null;\n        })\n        .on('touchstart', (d) => {\n          if (onceTouchedRegion === d) onceTouchedRegion = null;\n          else onceTouchedRegion = d;\n        })\n        .on('click', (d) => {\n          if (onceTouchedRegion) {\n            return;\n          }\n          if (mapMeta.mapType === MAP_TYPES.STATE) {\n            return;\n          }\n          changeMap(d.properties[propertyField], mapMeta.mapType);\n        })\n        .style('cursor', 'pointer')\n        .append('title')\n        .text(function (d) {\n          const value = mapData[d.properties[propertyField]] || 0;\n          return (\n            Number(\n              parseFloat(100 * (value / (statistic.total || 0.001))).toFixed(2)\n            ).toString() +\n            '% from ' +\n            toTitleCase(d.properties[propertyField])\n          );\n        });\n\n      svg\n        .append('path')\n        .attr('stroke', '#ff073a20')\n        .attr('fill', 'none')\n        .attr('stroke-width', 2)\n        .attr(\n          'd',\n          path(topojson.mesh(geoData, geoData.objects[mapMeta.graphObjectName]))\n        );\n    },\n    [\n      mapData,\n      mapMeta,\n      statistic.total,\n      statistic.maxConfirmed,\n      changeMap,\n      setHoveredRegion,\n    ]\n  );\n\n  const toTitleCase = (str) => {\n    str = str.toLowerCase().split(' ');\n    for (let i = 0; i < str.length; i++) {\n      str[i] = str[i].charAt(0).toUpperCase() + str[i].slice(1);\n    }\n    return str.join(' ');\n  };\n\n  const renderData = useCallback(() => {\n    const svg = d3.select(choroplethMap.current);\n\n    // Colorbar\n    const maxInterpolation = 0.8;\n    const color = d3\n      .scaleSequential(d3.interpolateReds)\n      .domain([0, statistic.maxConfirmed / maxInterpolation || 10]);\n\n    let cells = null;\n    let label = null;\n\n    label = ({i, genLength, generatedLabels, labelDelimiter}) => {\n      if (i === genLength - 1) {\n        const n = Math.floor(generatedLabels[i]);\n        return `${n}+`;\n      } else {\n        const n1 = 1 + Math.floor(generatedLabels[i]);\n        const n2 = Math.floor(generatedLabels[i + 1]);\n        return `${n1} - ${n2}`;\n      }\n    };\n\n    const numCells = 6;\n    const delta = Math.floor(\n      (statistic.maxConfirmed < numCells ? numCells : statistic.maxConfirmed) /\n        (numCells - 1)\n    );\n\n    cells = Array.from(Array(numCells).keys()).map((i) => i * delta);\n\n    svg\n      .append('g')\n      .attr('class', 'legendLinear')\n      .attr('transform', 'translate(1, 335)');\n\n    const legendLinear = legendColor()\n      .shapeWidth(36)\n      .shapeHeight(10)\n      .cells(cells)\n      .titleWidth(3)\n      .labels(label)\n      .title('Confirmed Cases')\n      .orient('vertical')\n      .scale(color);\n\n    svg\n      .select('.legendLinear')\n      .call(legendLinear)\n      .selectAll('text')\n      .style('font-size', '10px');\n  }, [statistic.maxConfirmed]);\n\n  useEffect(() => {\n    (async () => {\n      const data = await d3.json(mapMeta.geoDataFile);\n      if (statistic && choroplethMap.current) {\n        ready(data);\n        renderData();\n        setSvgRenderCount((prevCount) => prevCount + 1);\n      }\n    })();\n  }, [mapMeta.geoDataFile, statistic, renderData, ready]);\n\n  const highlightRegionInMap = (name) => {\n    const paths = d3.selectAll('.path-region');\n    paths.classed('map-hover', (d, i, nodes) => {\n      const propertyField =\n        'district' in d.properties\n          ? propertyFieldMap['state']\n          : propertyFieldMap['country'];\n      if (name === d.properties[propertyField]) {\n        nodes[i].parentNode.appendChild(nodes[i]);\n        return true;\n      }\n      return false;\n    });\n  };\n\n  useEffect(() => {\n    highlightRegionInMap(selectedRegion);\n  }, [svgRenderCount, selectedRegion]);\n\n  return (\n    <div className=\"svg-parent fadeInUp\" style={{animationDelay: '2.5s'}}>\n      <svg\n        id=\"chart\"\n        width=\"480\"\n        height=\"450\"\n        viewBox=\"0 0 480 450\"\n        preserveAspectRatio=\"xMidYMid meet\"\n        ref={choroplethMap}\n      ></svg>\n    </div>\n  );\n}\n\nexport default ChoroplethMap;\n","import React, {useState, useEffect, useMemo, useCallback} from 'react';\nimport ChoroplethMap from './choropleth';\nimport {MAP_TYPES, MAPS_DIR} from '../constants';\nimport {formatDate, formatDateAbsolute} from '../utils/common-functions';\nimport {formatDistance} from 'date-fns';\n\nconst mapMeta = {\n  Maharashtra: {\n    name: 'Maharashtra',\n    geoDataFile: `${MAPS_DIR}/maharashtra.json`,\n    mapType: MAP_TYPES.STATE,\n    graphObjectName: 'maharashtra_district',\n  }\n};\n\nexport default function ({states, stateDistrictWiseData, regionHighlighted}) {\n  const [selectedRegion, setSelectedRegion] = useState({});\n  const [currentHoveredRegion, setCurrentHoveredRegion] = useState({});\n  const [currentMap, setCurrentMap] = useState(mapMeta.Maharashtra);\n\n  useEffect(() => {\n    console.log('States in Map',states)\n    const onlyMH = states.filter(state => {\n      return state.statecode === 'MH'\n    })\n    const region = getRegionFromState(onlyMH[0]);\n\n    console.log(region)\n    setCurrentHoveredRegion(region);\n  }, [states]);\n\n  if (!currentHoveredRegion) {\n    return null;\n  }\n\n  const [statistic, currentMapData] = useMemo(() => {\n    const statistic = {total: 0, maxConfirmed: 0};\n    let currentMapData = {};\n\n    if (currentMap.mapType === MAP_TYPES.COUNTRY) {\n      currentMapData = states.reduce((acc, state) => {\n        if (state.state === 'Total') {\n          return acc;\n        }\n        const confirmed = parseInt(state.confirmed);\n        statistic.total += confirmed;\n        if (confirmed > statistic.maxConfirmed) {\n          statistic.maxConfirmed = confirmed;\n        }\n\n        acc[state.state] = state.confirmed;\n        return acc;\n      }, {});\n    } else if (currentMap.mapType === MAP_TYPES.STATE) {\n      const districtWiseData = (\n        stateDistrictWiseData[currentMap.name] || {districtData: {}}\n      ).districtData;\n      currentMapData = Object.keys(districtWiseData).reduce((acc, district) => {\n        const confirmed = parseInt(districtWiseData[district].confirmed);\n        statistic.total += confirmed;\n        if (confirmed > statistic.maxConfirmed) {\n          statistic.maxConfirmed = confirmed;\n        }\n        acc[district] = districtWiseData[district].confirmed;\n        return acc;\n      }, {});\n    }\n    return [statistic, currentMapData];\n  }, [currentMap, states, stateDistrictWiseData]);\n\n  const setHoveredRegion = useCallback(\n    (name, currentMap) => {\n      if (currentMap.mapType === MAP_TYPES.COUNTRY) {\n        setCurrentHoveredRegion(\n          getRegionFromState(states.filter((state) => name === state.state)[0])\n        );\n      } else if (currentMap.mapType === MAP_TYPES.STATE) {\n        const state = stateDistrictWiseData[currentMap.name] || {\n          districtData: {},\n        };\n        let districtData = state.districtData[name];\n        if (!districtData) {\n          districtData = {\n            confirmed: 0,\n            active: 0,\n            deaths: 0,\n            recovered: 0,\n          };\n        }\n        setCurrentHoveredRegion(getRegionFromDistrict(districtData, name));\n      }\n    },\n    [stateDistrictWiseData, states]\n  );\n\n  useEffect(() => {\n    if (regionHighlighted === undefined) {\n      return;\n    } else if (regionHighlighted === null) {\n      setSelectedRegion(null);\n      return;\n    }\n    const isState = !('district' in regionHighlighted);\n    if (isState) {\n      const newMap = mapMeta['Maharashtra'];\n      setCurrentMap(newMap);\n      const region = getRegionFromState(regionHighlighted.state);\n      setCurrentHoveredRegion(region);\n      setSelectedRegion(region.name);\n    } else {\n      const newMap = mapMeta[regionHighlighted.state.state];\n      if (!newMap) {\n        return;\n      }\n      setCurrentMap(newMap);\n      setHoveredRegion(regionHighlighted.district, newMap);\n      setSelectedRegion(regionHighlighted.district);\n    }\n  }, [regionHighlighted, currentMap.mapType, setHoveredRegion]);\n\n  const getRegionFromDistrict = (districtData, name) => {\n    if (!districtData) {\n      return;\n    }\n    const region = {...districtData};\n    if (!region.name) {\n      region.name = name;\n    }\n    return region;\n  };\n\n  const getRegionFromState = (state) => {\n    if (!state) {\n      return;\n    }\n    const region = {...state};\n    if (!region.name) {\n      region.name = region.state;\n    }\n    return region;\n  };\n\n  const switchMapToState = useCallback(\n    (name) => {\n      const newMap = mapMeta[name];\n      if (!newMap) {\n        return;\n      }\n      setCurrentMap(newMap);\n       if (newMap.mapType === MAP_TYPES.STATE) {\n        const districtData = (stateDistrictWiseData[name] || {districtData: {}})\n          .districtData;\n        const topDistrict = Object.keys(districtData)\n          .filter((name) => name !== 'Unknown')\n          .sort((a, b) => {\n            return districtData[b].confirmed - districtData[a].confirmed;\n          })[0];\n        setHoveredRegion(topDistrict, newMap);\n      }\n    },\n    [setHoveredRegion, stateDistrictWiseData, states]\n  );\n  const {name, lastupdatedtime} = currentHoveredRegion;\n\n  return (\n    <div className=\"MapExplorer fadeInUp\" style={{animationDelay: '1.5s'}}>\n      <div className=\"header\">\n        <h1>{currentMap.name}</h1>\n        <h6>\n          {window.innerWidth <= 769 ? 'Tap' : 'Hover'} over a{' '}\n          {currentMap.mapType === MAP_TYPES.COUNTRY ? 'state/ut' : 'district'}{' '}\n          for more details\n        </h6>\n      </div>\n\n      <div className=\"map-stats\">\n        <div className=\"stats fadeInUp\" style={{animationDelay: '2s'}}>\n          <h5>Confirmed</h5>\n          <div className=\"stats-bottom\">\n            <h1>{currentHoveredRegion.confirmed}</h1>\n            <h6>{}</h6>\n          </div>\n        </div>\n\n        <div\n          className=\"stats is-blue fadeInUp\"\n          style={{animationDelay: '2.1s'}}\n        >\n          <h5>Active</h5>\n          <div className=\"stats-bottom\">\n            <h1>{currentHoveredRegion.active || ''}</h1>\n            <h6>{}</h6>\n          </div>\n        </div>\n\n        <div\n          className=\"stats is-green fadeInUp\"\n          style={{animationDelay: '2.2s'}}\n        >\n          <h5>Recovered</h5>\n          <div className=\"stats-bottom\">\n            <h1>{currentHoveredRegion.recovered || ''}</h1>\n            <h6>{}</h6>\n          </div>\n        </div>\n\n        <div\n          className=\"stats is-gray fadeInUp\"\n          style={{animationDelay: '2.3s'}}\n        >\n          <h5>Deceased</h5>\n          <div className=\"stats-bottom\">\n            <h1>{currentHoveredRegion.deaths || ''}</h1>\n            <h6>{}</h6>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"meta fadeInUp\" style={{animationDelay: '2.4s'}}>\n        <h2>{name}</h2>\n        {lastupdatedtime && (\n          <div\n            className={`last-update ${\n              currentMap.mapType === MAP_TYPES.STATE\n                ? 'district-last-update'\n                : 'state-last-update'\n            }`}\n          >\n            <h6>Last Updated</h6>\n            <h3\n              title={\n                isNaN(Date.parse(formatDate(lastupdatedtime)))\n                  ? ''\n                  : formatDateAbsolute(lastupdatedtime)\n              }\n            >\n              {isNaN(Date.parse(formatDate(lastupdatedtime)))\n                ? ''\n                : formatDistance(\n                    new Date(formatDate(lastupdatedtime)),\n                    new Date()\n                  ) + ' Ago'}\n            </h3>\n          </div>\n        )}\n\n        {currentMap.mapType === MAP_TYPES.STATE &&\n        currentMapData.Unknown > 0 ? (\n          <h4 className=\"unknown\">\n            Districts unknown for {currentMapData.Unknown} people\n          </h4>\n        ) : null}\n\n        {/* {currentMap.mapType === MAP_TYPES.STATE ? (\n          <div\n            className=\"button back-button\"\n            onClick={() => switchMapToState('India')}\n          >\n            Back\n          </div>\n        ) : null} */}\n      </div>\n\n      <ChoroplethMap\n        statistic={statistic}\n        mapMeta={currentMap}\n        mapData={currentMapData}\n        setHoveredRegion={setHoveredRegion}\n        changeMap={switchMapToState}\n        selectedRegion={selectedRegion}\n      />\n    </div>\n  );\n}\n","import React, {useState, useEffect} from 'react';\nimport axios from 'axios';\nimport {formatDistance, format} from 'date-fns';\nimport {\n  formatDate,\n  formatDateAbsolute,\n  validateCTS,\n} from '../../utils/common-functions';\nimport * as Icon from 'react-feather';\nimport {Link} from 'react-router-dom';\n\nimport Table from './../table';\nimport Level from './../level';\nimport MapExplorer from './../mapexplorer';\nimport TimeSeries from './../timeseries';\nimport Minigraph from './../minigraph';\n\nfunction Home(props) {\n  const [states, setStates] = useState([]);\n  const [stateDistrictWiseData, setStateDistrictWiseData] = useState({});\n  /* const [patients, setPatients] = useState([]);*/\n  const [fetched, setFetched] = useState(false);\n  const [graphOption, setGraphOption] = useState(1);\n  const [lastUpdated, setLastUpdated] = useState('');\n  const [timeseries, setTimeseries] = useState([]);\n  const [activityLog, setActivityLog] = useState([]);\n  const [timeseriesMode, setTimeseriesMode] = useState(true);\n  const [timeseriesLogMode, setTimeseriesLogMode] = useState(false);\n  const [regionHighlighted, setRegionHighlighted] = useState(undefined);\n\n  useEffect(() => {\n    if (fetched === false) {\n      getStates();\n    }\n  }, [fetched]);\n\n  const getStates = async () => {\n    try {\n      const [\n        response,\n        stateDistrictWiseResponse,\n        updateLogResponse,\n      ] = await Promise.all([\n        axios.get('https://api.covid19india.org/data.json'),\n        axios.get('https://api.covid19india.org/state_district_wise.json'),\n        axios.get('https://api.covid19india.org/updatelog/log.json'),\n      ]);\n      // console.log('Statewise',response.data.statewise)\n      // const onlyMH = response.data.statewise.filter(function(state) {\n      //   return state.statecode == \"MH\";\n      // });\n      setStates(response.data.statewise);\n      setTimeseries(validateCTS(response.data.cases_time_series));\n      setLastUpdated(response.data.statewise[0].lastupdatedtime);\n      setStateDistrictWiseData(stateDistrictWiseResponse.data);\n      setActivityLog(updateLogResponse.data);\n      /* setPatients(rawDataResponse.data.raw_data.filter((p) => p.detectedstate));*/\n      setFetched(true);\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n\n  const onHighlightState = (state, index) => {\n    if (!state && !index) setRegionHighlighted(null);\n    else setRegionHighlighted({state, index});\n  };\n  const onHighlightDistrict = (district, state, index) => {\n    if (!state && !index && !district) setRegionHighlighted(null);\n    else setRegionHighlighted({district, state, index});\n  };\n\n  return (\n    <React.Fragment>\n      <div className=\"Home\">\n        <div className=\"home-left\">\n          <div className=\"header fadeInUp\" style={{animationDelay: '1s'}}>\n            <div className=\"header-mid\">\n              <div className=\"titles\">\n                <h1>Maharashtra COVID-19 Tracker</h1>\n                <h6 style={{fontWeight: 600}}>Enroot Mumbai Volunteer Initiative</h6>\n              </div>\n              {/* <div className=\"last-update\">\n                <h6>Last Updated</h6>\n                <h6 style={{color: '#28a745', fontWeight: 600}}>\n                  {isNaN(Date.parse(formatDate(lastUpdated)))\n                    ? ''\n                    : formatDistance(\n                        new Date(formatDate(lastUpdated)),\n                        new Date()\n                      ) + ' Ago'}\n                </h6>\n                <h6 style={{color: '#28a745', fontWeight: 600}}>\n                  {isNaN(Date.parse(formatDate(lastUpdated)))\n                    ? ''\n                    : formatDateAbsolute(lastUpdated)}\n                </h6>\n              </div> */}\n            </div>\n          </div>\n\n          {/* {states.length > 1 && <Level data={states} />} */}\n          {/* <Minigraph timeseries={timeseries} animate={true} /> */}\n          <Table\n            states={states}\n            summary={false}\n            stateDistrictWiseData={stateDistrictWiseData}\n            onHighlightState={onHighlightState}\n            onHighlightDistrict={onHighlightDistrict}\n          />\n        </div>\n\n        <div className=\"home-right\">\n          {fetched && (\n            <React.Fragment>\n              <MapExplorer\n                states={states}\n                stateDistrictWiseData={stateDistrictWiseData}\n                regionHighlighted={regionHighlighted}\n              />\n\n              {/* <div\n                className=\"timeseries-header fadeInUp\"\n                style={{animationDelay: '2.5s'}}\n              >\n                <h1>Spread Trends</h1>\n                <div className=\"tabs\">\n                  <div\n                    className={`tab ${graphOption === 1 ? 'focused' : ''}`}\n                    onClick={() => {\n                      setGraphOption(1);\n                    }}\n                  >\n                    <h4>Cumulative</h4>\n                  </div>\n                  <div\n                    className={`tab ${graphOption === 2 ? 'focused' : ''}`}\n                    onClick={() => {\n                      setGraphOption(2);\n                    }}\n                  >\n                    <h4>Daily</h4>\n                  </div>\n                </div>\n\n                <div className=\"scale-modes\">\n                  <label>Scale Modes</label>\n                  <div className=\"timeseries-mode\">\n                    <label htmlFor=\"timeseries-mode\">Uniform</label>\n                    <input\n                      type=\"checkbox\"\n                      checked={timeseriesMode}\n                      className=\"switch\"\n                      aria-label=\"Checked by default to scale uniformly.\"\n                      onChange={(event) => {\n                        setTimeseriesMode(!timeseriesMode);\n                      }}\n                    />\n                  </div>\n                  <div\n                    className={`timeseries-logmode ${\n                      graphOption !== 1 ? 'disabled' : ''\n                    }`}\n                  >\n                    <label htmlFor=\"timeseries-logmode\">Logarithmic</label>\n                    <input\n                      type=\"checkbox\"\n                      checked={graphOption === 1 && timeseriesLogMode}\n                      className=\"switch\"\n                      disabled={graphOption !== 1}\n                      onChange={(event) => {\n                        setTimeseriesLogMode(!timeseriesLogMode);\n                      }}\n                    />\n                  </div>\n                </div>\n              </div> */}\n\n              {/* <TimeSeries\n                timeseries={timeseries}\n                type={graphOption}\n                mode={timeseriesMode}\n                logMode={timeseriesLogMode}\n              /> */}\n            </React.Fragment>\n          )}\n        </div>\n\n        {/* <div className=\"home-left\">\n        {patients.length > 1 && (\n          <div className=\"patients-summary\">\n            <h1>Recent Cases</h1>\n            <h6>A summary of the latest reported cases</h6>\n            <div className=\"legend\">\n              <div className=\"legend-left\">\n                <div className=\"circle is-female\"></div>\n                <h5 className=\"is-female\">Female</h5>\n                <div className=\"circle is-male\"></div>\n                <h5 className=\"is-male\">Male</h5>\n                <div className=\"circle\"></div>\n                <h5 className=\"\">Unknown</h5>\n              </div>\n            </div>\n            <div className=\"patients-summary-wrapper\">\n              <Patients\n                patients={patients}\n                summary={true}\n                colorMode={'genders'}\n                expand={true}\n              />\n            </div>\n            <button className=\"button\">\n              <Link to=\"/database\">\n                <Icon.Database />\n                <span>View the Patients Database</span>\n              </Link>\n            </button>\n          </div>\n        )}\n      </div>\n      <div className=\"home-right\"></div>\n    */}\n      </div>\n\n      {/* <div className=\"Home\">\n        <div className=\"home-left\">\n          <div\n            className=\"updates-header fadeInUp\"\n            style={{animationDelay: '1.5s'}}\n          >\n            <h1>Updates</h1>\n            <h2>{format(new Date(), 'd MMM')}</h2>\n          </div>\n\n          <div className=\"updates fadeInUp\" style={{animationDelay: '1.7s'}}>\n            {activityLog\n              .slice(-5)\n              .reverse()\n              .map(function (activity, index) {\n                return (\n                  <div key={index} className=\"update\">\n                    <h5>\n                      {formatDistance(\n                        new Date(activity.timestamp * 1000),\n                        new Date()\n                      ) + ' Ago'}\n                    </h5>\n                    <h4>{activity.update}</h4>\n                  </div>\n                );\n              })}\n            <button className=\"button\">\n              <Link to=\"/demographics\">\n                <Icon.Database />\n                <span>Demographic Overview</span>\n              </Link>\n            </button>\n          </div>\n        </div>\n\n        <div className=\"home-right\"></div>\n      </div> */}\n    </React.Fragment>\n  );\n}\n\nexport default Home;\n","import React from 'react';\nimport {Link} from 'react-router-dom';\n\nfunction Navbar(props) {\n  // HTML Properties for each of the links in UI\n  const navLinkProps = (path, animationDelay) => ({\n    className: `fadeInUp ${window.location.pathname === path ? 'focused' : ''}`,\n    style: {\n      animationDelay: `${animationDelay}s`,\n    },\n  });\n\n  if (window.location.pathname !== '/summary') {\n    return (\n      <div\n        className=\"Navbar\"\n        style={{\n          animationDelay: '0.5s',\n          transition: 'all 0.3s ease-in-out',\n        }}\n      >\n        <img\n          className=\"fadeInUp logo\"\n          alt=\"India COVID-19 Tracker\"\n          src=\"/icon.png\"\n          style={{\n            animationDelay: '0.0s',\n            transition: 'all 0.3s ease-in-out',\n          }}\n        />\n\n        <div className=\"navbar-left\">\n          {props.pages.map((page, i) => {\n            return (\n              <Link to={page.pageLink} key={i}>\n                <span\n                  {...navLinkProps(page.pageLink, page.animationDelayForNavbar)}\n                >\n                  {page.displayName}\n                </span>\n              </Link>\n            );\n          })}\n        </div>\n\n        <div className=\"navbar-right\"></div>\n      </div>\n    );\n  } else {\n    return <div></div>;\n  }\n}\n\nexport default Navbar;\n","import React from 'react';\n\nfunction Links(props) {\n  return (\n    <div className=\"Links\">\n      <div className=\"link fadeInUp\" style={{animationDelay: '0.2s'}}>\n        <h3>HELPLINE NUMBERS [by State]</h3>\n        <a\n          href=\"https://www.mohfw.gov.in/pdf/coronvavirushelplinenumber.pdf\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          https://www.mohfw.gov.in/pdf/coronvavirushelplinenumber.pdf\n        </a>\n      </div>\n\n      <div className=\"link fadeInUp\" style={{animationDelay: '0.3s'}}>\n        <h3>Ministry of Health and Family Welfare, Gov. of India</h3>\n        <a\n          href=\"https://www.mohfw.gov.in/\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          https://www.mohfw.gov.in/\n        </a>\n      </div>\n\n      <div className=\"link fadeInUp\" style={{animationDelay: '0.4s'}}>\n        <h3>WHO : COVID-19 Home Page</h3>\n        <a\n          href=\"https://www.who.int/emergencies/diseases/novel-coronavirus-2019\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          https://www.who.int/emergencies/diseases/novel-coronavirus-2019\n        </a>\n      </div>\n\n      <div className=\"link fadeInUp\" style={{animationDelay: '0.5s'}}>\n        <h3>CDC</h3>\n        <a\n          href=\"https://www.cdc.gov/coronavirus/2019-ncov/faq.html\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          https://www.cdc.gov/coronavirus/2019-ncov/faq.html\n        </a>\n      </div>\n\n      <div className=\"link fadeInUp\" style={{animationDelay: '0.6s'}}>\n        <h3>Crowdsourced list of Resources & Essentials from across India</h3>\n        <a\n          href=\"https://bit.ly/covid19resourcelist\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          https://bit.ly/covid19resourcelist\n        </a>\n      </div>\n\n      <div className=\"link fadeInUp\" style={{animationDelay: '0.7s'}}>\n        <h3>COVID-19 Global Tracker</h3>\n        <a\n          href=\"https://coronavirus.thebaselab.com/\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          https://coronavirus.thebaselab.com/\n        </a>\n      </div>\n\n      <div className=\"link fadeInUp\" style={{animationDelay: '0.7s'}}>\n        <p>We are soon adding Maharashtra specific resources, please contact - enrootmumbai@gmail.com</p>\n      </div>\n    </div>\n  );\n}\n\nexport default Links;\n","import React, {useState, useEffect} from 'react';\nimport axios from 'axios';\n\nfunction FAQ(props) {\n  // const [faq, setFaq] = useState([]);\n\n  // useEffect(() => {\n  //   getFAQs();\n  // }, []);\n\n  useEffect(() => {\n    window.scrollTo(0, 0);\n  }, []);\n\n\n  const faq = [\n    {id:1,question:'Are you official ?',answer:'No we are volunteer team, this project is just to share some visualizations of the data'},\n    {id:2,question:'Who is your inspiration ?',answer:'Our inspiration is Covid19India team'},\n    {id:3,question:'Where are you getting patient data from ?',answer:'We are getting data from Covid19India api - We are using state bulletins and official handles to update our numbers. The data is validated by a group of volunteers and published into a Google sheet and an API. API is available for all at api.covid19india.org. We would love it if you can use this data in the fight against this virus. The source <a href=\\\"https://telegra.ph/Covid-19-Sources-03-19\\\">list is here.</a>\\n\\n'},\n    {id:4,question:'Who are you ? ', answer:'We are a group of volunteers from <a href=\\\"http://enrootmumbai.in/\">Enroot Mumbai team.</a>'}\n  ]\n\n\n  // const getFAQs = () => {\n  //   axios\n  //     .get('https://api.covid19india.org/website_data.json')\n  //     .then((response) => {\n  //       setFaq(response.data['faq']);\n  //     })\n  //     .catch((error) => {\n  //       console.log(error);\n  //     });\n  // };\n\n  return (\n    <div className=\"FAQ\">\n      {faq.map((faq, index) => {\n        return (\n          <div\n            key={index}\n            className=\"faq fadeInUp\"\n            style={{animationDelay: `${0.5 + index * 0.1}s`}}\n          >\n            <h2 className=\"question\">{faq.question}</h2>\n            <h2\n              className=\"answer\"\n              dangerouslySetInnerHTML={{__html: faq.answer}}\n            ></h2>\n          </div>\n        );\n      })}\n      \n    </div>\n  );\n}\n\nexport default FAQ;\n","import React, {useState, useEffect} from 'react';\nimport axios from 'axios';\nimport GenderChart from './Charts/genderchart';\nimport AgeChart from './Charts/agechart';\nimport NationalityChart from './Charts/nationalitychart';\nimport AllStatesChart from './Charts/allstates';\nimport TotalConfirmedChart from './Charts/totalconfirmedchart';\nimport DailyConfirmedChart from './Charts/dailyconfirmedchart';\n\nfunction DeepDive(props) {\n  const [fetched, setFetched] = useState(false);\n  const [timeseries, setTimeseries] = useState([]);\n  const [rawData, setRawData] = useState([]);\n  const [statesTimeSeries, setStatesTimeSeries] = useState([]);\n\n  useEffect(() => {\n    if (fetched === false) {\n      getStates();\n    }\n  }, [fetched]);\n\n  const getStates = async () => {\n    try {\n      const [\n        response,\n        rawDataResponse,\n        stateDailyResponse,\n      ] = await Promise.all([\n        axios.get('https://api.covid19india.org/data.json'),\n        axios.get('https://api.covid19india.org/raw_data.json'),\n        axios.get('https://api.covid19india.org/states_daily.json'),\n      ]);\n      setTimeseries(response.data.cases_time_series);\n      setStatesTimeSeries(stateDailyResponse.data.states_daily);\n      setRawData(rawDataResponse.data.raw_data);\n      setFetched(true);\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  return (\n    <div className=\"cards-container\">\n      <section className=\"cards\">\n        <div className=\"card fadeInUp\" style={{animationDelay: '0.7s'}}>\n          <TotalConfirmedChart\n            title=\"India - Total Cases\"\n            timeseries={timeseries}\n          />\n        </div>\n\n        <div className=\"card fadeInUp\" style={{animationDelay: '0.7s'}}>\n          <DailyConfirmedChart\n            title=\"India - Daily Cases\"\n            timeseries={timeseries}\n          />\n        </div>\n\n        <div className=\"card fadeInUp\" style={{animationDelay: '0.7s'}}>\n          <AllStatesChart\n            title=\"States - Total Cases\"\n            data={statesTimeSeries}\n          />\n        </div>\n\n        <div className=\"card fadeInUp\" style={{animationDelay: '0.7s'}}>\n          <GenderChart title=\"Patient Gender\" data={rawData} />\n        </div>\n\n        <div className=\"card fadeInUp\" style={{animationDelay: '0.7s'}}>\n          <AgeChart title=\"Patient Age\" data={rawData} />\n        </div>\n\n        <div className=\"card fadeInUp\" style={{animationDelay: '0.7s'}}>\n          <NationalityChart title=\"Patient Nationality\" data={rawData} />\n        </div>\n      </section>\n    </div>\n  );\n}\n\nexport default DeepDive;\n","import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Redirect,\n} from 'react-router-dom';\nimport * as Icon from 'react-feather';\n\nimport './App.scss';\n\nimport Home from './components/Screens/home';\nimport Navbar from './components/navbar';\nimport Links from './components/links';\nimport FAQ from './components/faq';\nimport Banner from './components/banner';\nimport PatientDB from './components/patientdb';\nimport DeepDive from './components/deepdive';\n\nconst history = require('history').createBrowserHistory;\n\nfunction App() {\n  const pages = [\n    {\n      pageLink: '/',\n      view: Home,\n      displayName: 'Home',\n      animationDelayForNavbar: 0.2,\n    },\n    // {\n    //   pageLink: '/demographics',\n    //   view: PatientDB,\n    //   displayName: 'Demographics',\n    //   animationDelayForNavbar: 0.3,\n    // },\n    // {\n    //   pageLink: '/deepdive',\n    //   view: DeepDive,\n    //   displayName: 'Deep Dive',\n    //   animationDelayForNavbar: 0.4,\n    // },\n    {\n      pageLink: '/links',\n      view: Links,\n      displayName: 'Helpful Links',\n      animationDelayForNavbar: 0.4,\n    },\n    {\n      pageLink: '/faq',\n      view: FAQ,\n      displayName: 'About',\n      animationDelayForNavbar: 0.5,\n    },\n  ];\n\n  return (\n    <div className=\"App\">\n      <Router history={history}>\n        <Route\n          render={({location}) => (\n            <div className=\"Almighty-Router\">\n              <Navbar pages={pages} />\n              {/* <Banner /> */}\n              <Route exact path=\"/\" render={() => <Redirect to=\"/\" />} />\n              <Switch location={location}>\n                {pages.map((page, i) => {\n                  return (\n                    <Route\n                      exact\n                      path={page.pageLink}\n                      component={page.view}\n                      key={i}\n                    />\n                  );\n                })}\n                <Redirect to=\"/\" />\n              </Switch>\n            </div>\n          )}\n        />\n      </Router>\n\n      <footer className=\"fadeInUp\" style={{animationDelay: '2s'}}>\n        {/* <img\n          src=\"/icon.png\"\n          alt=\"https://www.covid19india.org | Coronavirus cases live dashboard\"\n        /> */}\n\n        <h5>Powered by:</h5>\n        <a\n          href=\"http://enrootmumbai.in/\"\n          className=\"button enroot\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          <img\n            src=\"emlogo.png\"\n            alt=\"Enroot Mumbai\"\n            style={{width:'60%',height:'60%'}}\n          />\n          {/* <span>Enroot Mumbai</span> */}\n        </a>\n        <h5>Inspired by:</h5>\n        <a\n          href=\"https://www.covid19india.org/\"\n          className=\"button github\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          {/* <Icon.GitHub /> */}\n          <span>Covid 19 India</span>\n        </a>\n\n        <h5>Join the volunteers:</h5>\n        <a\n          href=\"https://chat.whatsapp.com/LUE5qRKSkm7ERVZqrbokV7\"\n          className=\"button github\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          <span>WhatsApp Group</span>\n        </a>\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: {'Service-Worker': 'script'},\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}